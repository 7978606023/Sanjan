<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" ignored="0" total="37" passed="34">
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite" duration-ms="255" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="255" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
      <class name="com.test.stream.ComperatorTest">
        <test-method status="PASS" signature="negitive()[pri:0, instance:com.test.stream.ComperatorTest@6a4f787b]" name="negitive" duration-ms="2" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negitive -->
        <test-method status="PASS" signature="numbers()[pri:0, instance:com.test.stream.ComperatorTest@6a4f787b]" name="numbers" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- numbers -->
        <test-method status="PASS" signature="positive()[pri:0, instance:com.test.stream.ComperatorTest@6a4f787b]" name="positive" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positive -->
        <test-method status="PASS" signature="positiveNegetive()[pri:0, instance:com.test.stream.ComperatorTest@6a4f787b]" name="positiveNegetive" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNegetive -->
        <test-method status="PASS" signature="zero()[pri:0, instance:com.test.stream.ComperatorTest@6a4f787b]" name="zero" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- zero -->
      </class> <!-- com.test.stream.ComperatorTest -->
      <class name="com.test.stream.NumberStreamTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.test.stream.NumberStreamTest@91161c7]" name="setUp" is-config="true" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="Null()[pri:0, instance:com.test.stream.NumberStreamTest@91161c7]" name="Null" duration-ms="2" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Null -->
        <test-method status="FAIL" signature="PositiveNegetive()[pri:0, instance:com.test.stream.NumberStreamTest@91161c7]" name="PositiveNegetive" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.assertEqualsImpl(Assert.java:136)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:751)
at org.testng.Assert.assertEquals(Assert.java:761)
at com.test.stream.NumberStreamTest.PositiveNegetive(NumberStreamTest.java:36)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1255)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PositiveNegetive -->
        <test-method status="PASS" signature="duplicateNum()[pri:0, instance:com.test.stream.NumberStreamTest@91161c7]" name="duplicateNum" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- duplicateNum -->
        <test-method status="PASS" signature="negetive()[pri:0, instance:com.test.stream.NumberStreamTest@91161c7]" name="negetive" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negetive -->
        <test-method status="PASS" signature="positive()[pri:0, instance:com.test.stream.NumberStreamTest@91161c7]" name="positive" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positive -->
        <test-method status="PASS" signature="zero()[pri:0, instance:com.test.stream.NumberStreamTest@91161c7]" name="zero" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- zero -->
      </class> <!-- com.test.stream.NumberStreamTest -->
      <class name="com.test.stream.FilterTest">
        <test-method status="PASS" signature="setUP()[pri:0, instance:com.test.stream.FilterTest@5e3a8624]" name="setUP" is-config="true" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUP -->
        <test-method status="PASS" signature="checkEven()[pri:0, instance:com.test.stream.FilterTest@5e3a8624]" name="checkEven" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkEven -->
        <test-method status="FAIL" signature="checkOdd()[pri:0, instance:com.test.stream.FilterTest@5e3a8624]" name="checkOdd" duration-ms="2" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Lists differ at element [0]: 1 != 2 expected [1] but found [2]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Lists differ at element [0]: 1 != 2 expected [1] but found [2]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.assertEqualsImpl(Assert.java:136)
at org.testng.Assert.assertEquals(Assert.java:1031)
at org.testng.Assert.assertEquals(Assert.java:993)
at com.test.stream.FilterTest.checkOdd(FilterTest.java:42)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1255)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkOdd -->
        <test-method status="FAIL" signature="checkZero()[pri:0, instance:com.test.stream.FilterTest@5e3a8624]" name="checkZero" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[lists don't have the same size expected [2] but found [1]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: lists don't have the same size expected [2] but found [1]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.assertEqualsImpl(Assert.java:136)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:839)
at org.testng.Assert.assertEquals(Assert.java:1017)
at org.testng.Assert.assertEquals(Assert.java:993)
at com.test.stream.FilterTest.checkZero(FilterTest.java:52)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1255)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkZero -->
      </class> <!-- com.test.stream.FilterTest -->
      <class name="com.test.stream.CompareTest$ComparatorTest">
        <test-method status="PASS" signature="Zero()[pri:0, instance:com.test.stream.CompareTest$ComparatorTest@604ed9f0]" name="Zero" duration-ms="20" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Zero -->
        <test-method status="PASS" signature="negetiveZero()[pri:0, instance:com.test.stream.CompareTest$ComparatorTest@604ed9f0]" name="negetiveZero" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negetiveZero -->
        <test-method status="PASS" signature="negitive()[pri:0, instance:com.test.stream.CompareTest$ComparatorTest@604ed9f0]" name="negitive" duration-ms="2" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negitive -->
        <test-method status="PASS" signature="positive()[pri:0, instance:com.test.stream.CompareTest$ComparatorTest@604ed9f0]" name="positive" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positive -->
        <test-method status="PASS" signature="positiveNegetive()[pri:0, instance:com.test.stream.CompareTest$ComparatorTest@604ed9f0]" name="positiveNegetive" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNegetive -->
      </class> <!-- com.test.stream.CompareTest$ComparatorTest -->
      <class name="com.test.stream.DayTest">
        <test-method status="PASS" signature="example()[pri:0, instance:com.test.stream.DayTest@685cb137]" name="example" duration-ms="27" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- example -->
      </class> <!-- com.test.stream.DayTest -->
      <class name="com.test.stream.BinaryTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.test.stream.BinaryTest@3bfdc050]" name="setUp" is-config="true" duration-ms="33" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="negetive()[pri:0, instance:com.test.stream.BinaryTest@3bfdc050]" name="negetive" duration-ms="6" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negetive -->
        <test-method status="PASS" signature="positive()[pri:0, instance:com.test.stream.BinaryTest@3bfdc050]" name="positive" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positive -->
        <test-method status="PASS" signature="positiveNegetive()[pri:0, instance:com.test.stream.BinaryTest@3bfdc050]" name="positiveNegetive" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNegetive -->
        <test-method status="PASS" signature="positiveZero()[pri:0, instance:com.test.stream.BinaryTest@3bfdc050]" name="positiveZero" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveZero -->
        <test-method status="PASS" signature="zero()[pri:0, instance:com.test.stream.BinaryTest@3bfdc050]" name="zero" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- zero -->
        <test-method status="PASS" signature="zeroNegetive()[pri:0, instance:com.test.stream.BinaryTest@3bfdc050]" name="zeroNegetive" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- zeroNegetive -->
      </class> <!-- com.test.stream.BinaryTest -->
      <class name="com.test.stream.StringLowerCaseTest">
        <test-method status="PASS" signature="countsLowercaseLetterExample()[pri:0, instance:com.test.stream.StringLowerCaseTest@6a41eaa2]" name="countsLowercaseLetterExample" duration-ms="43" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- countsLowercaseLetterExample -->
        <test-method status="PASS" signature="findsMostLowercaseString()[pri:0, instance:com.test.stream.StringLowerCaseTest@6a41eaa2]" name="findsMostLowercaseString" duration-ms="5" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findsMostLowercaseString -->
        <test-method status="PASS" signature="noLowercaseLettersInAnEmptyString()[pri:0, instance:com.test.stream.StringLowerCaseTest@6a41eaa2]" name="noLowercaseLettersInAnEmptyString" duration-ms="2" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- noLowercaseLettersInAnEmptyString -->
        <test-method status="PASS" signature="noStringReturnedForEmptyList()[pri:0, instance:com.test.stream.StringLowerCaseTest@6a41eaa2]" name="noStringReturnedForEmptyList" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- noStringReturnedForEmptyList -->
        <test-method status="PASS" signature="suppoertsNoLowercaseLetters()[pri:0, instance:com.test.stream.StringLowerCaseTest@6a41eaa2]" name="suppoertsNoLowercaseLetters" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suppoertsNoLowercaseLetters -->
      </class> <!-- com.test.stream.StringLowerCaseTest -->
      <class name="com.test.stream.DemoMethodTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.test.stream.DemoMethodTest@1bce4f0a]" name="setUp" is-config="true" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="test()[pri:0, instance:com.test.stream.DemoMethodTest@1bce4f0a]" name="test" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
      </class> <!-- com.test.stream.DemoMethodTest -->
      <class name="com.test.stream.MapTest">
        <test-method status="PASS" signature="setUP()[pri:0, instance:com.test.stream.MapTest@5c3bd550]" name="setUP" is-config="true" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUP -->
        <test-method status="PASS" signature="TestWithEvenNum()[pri:0, instance:com.test.stream.MapTest@5c3bd550]" name="TestWithEvenNum" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestWithEvenNum -->
        <test-method status="PASS" signature="TestWithMinusNum()[pri:0, instance:com.test.stream.MapTest@5c3bd550]" name="TestWithMinusNum" duration-ms="1" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestWithMinusNum -->
        <test-method status="PASS" signature="TestWithOddNum()[pri:0, instance:com.test.stream.MapTest@5c3bd550]" name="TestWithOddNum" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestWithOddNum -->
        <test-method status="PASS" signature="TestWithZero()[pri:0, instance:com.test.stream.MapTest@5c3bd550]" name="TestWithZero" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestWithZero -->
        <test-method status="PASS" signature="testWithMultiplyNum()[pri:0, instance:com.test.stream.MapTest@5c3bd550]" name="testWithMultiplyNum" duration-ms="0" started-at="2020-05-19T05:15:46 PDT" finished-at="2020-05-19T05:15:46 PDT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithMultiplyNum -->
      </class> <!-- com.test.stream.MapTest -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
